[package]
name = "selendra"
version = "0.2.3"
authors = ["Selendra <info@selendra.org>"]
edition = "2021"
description = "Implementation of Selendra node in Rust based on the Substrate framework."
license = "GPL-3.0-only"
rust-version = "1.57.0" # custom profiles

[[bin]]
name = "selendra"
path = "src/main.rs"

[dependencies]
selendra-cli = { path = "cli", features = [ "cardamom-native" ]  }
color-eyre = { version = "0.6.1", default-features = false }
parity-util-mem = { version = "0.11.0", default-features = false, features = ["jemalloc-global"] }

[dev-dependencies]
assert_cmd = "2.0.4"
nix = "0.23.1"
tempfile = "3.2.0"
tokio = "1.17.0"
remote-externalities = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.18" }
selendra-core-primitives = { path = "./primitives/core-primitives" }

[workspace]
members = [
	"cli",
	"primitives/core-primitives",
	"modules/erasure-coding",
	"primitives",
	"primitives/test-helpers",
	"runtime/common",
	"runtime/common/slot_range_helper",
	"runtime/parachains/metrics",
	"runtime/parachains",
	"runtime/selendra",
	"runtime/selendra/constants",
	"runtime/cardamom",
	"runtime/cardamom/constants",
	"runtime/test-runtime",
	"runtime/test-runtime/constants",
	"modules/statement-table",
	"modules/xcm",
	"modules/xcm/xcm-builder",
	"modules/xcm/xcm-executor",
	"modules/xcm/xcm-executor/integration-tests",
	"modules/xcm/xcm-simulator",
	"modules/xcm/xcm-simulator/example",
	"modules/xcm/xcm-simulator/fuzzer",
	"modules/xcm/pallet-xcm",
	"modules/xcm/pallet-xcm-benchmarks",
	"modules/xcm/procedural",
	"node/client",
	"node/collation-generation",
	"node/core/approval-voting",
	"node/core/av-store",
	"node/core/backing",
	"node/core/bitfield-signing",
	"node/core/candidate-validation",
	"node/core/chain-api",
	"node/core/chain-selection",
	"node/core/dispute-coordinator",
	"node/core/parachains-inherent",
	"node/core/provisioner",
	"node/core/pvf",
	"node/core/pvf-checker",
	"node/core/runtime-api",
	"node/network/approval-distribution",
	"node/network/bridge",
	"node/network/protocol",
	"node/network/statement-distribution",
	"node/network/bitfield-distribution",
	"node/network/availability-distribution",
	"node/network/availability-recovery",
	"node/network/collator-protocol",
	"node/network/gossip-support",
	"node/network/dispute-distribution",
	"node/overseer",
	"node/overseer/overseer-gen",
	"node/overseer/overseer-gen/proc-macro",
	"node/malus",
	"node/primitives",
	"node/service",
	"node/subsystem",
	"node/subsystem-types",
	"node/subsystem-test-helpers",
	"node/subsystem-util",
	"node/jaeger",
	"node/metrics",
	"node/metered-channel",
	"node/test/client",
	"node/test/performance-test",
	"node/test/service",
	"node/zombienet-backchannel",
	"node/rpc",
	"modules/parachain",
	"modules/parachain/test-parachains",
	"modules/parachain/test-parachains/adder",
	"modules/parachain/test-parachains/adder/collator",
	"modules/parachain/test-parachains/halt",
	"modules/parachain/test-parachains/undying",
	"modules/parachain/test-parachains/undying/collator",
	"utils/staking-miner",
	"utils/remote-ext-tests/bags-list",
	"utils/generate-bags",

	"modules/cumulus/client/cli",
	"modules/cumulus/client/consensus/aura",
	"modules/cumulus/client/consensus/common",
	"modules/cumulus/client/consensus/relay-chain",
	"modules/cumulus/client/network",
	"modules/cumulus/client/pov-recovery",
	"modules/cumulus/client/service",
	"modules/cumulus/client/relay-chain-interface",
	"modules/cumulus/client/relay-chain-inprocess-interface",
	"modules/cumulus/client/relay-chain-rpc-interface",
	"modules/cumulus/pallets/aura-ext",
	"modules/cumulus/pallets/collator-selection",
	"modules/cumulus/pallets/dmp-queue",
	"modules/cumulus/pallets/parachain-system",
	"modules/cumulus/pallets/parachain-system/proc-macro",
	"modules/cumulus/pallets/session-benchmarking",
	"modules/cumulus/pallets/xcm",
	"modules/cumulus/pallets/xcmp-queue",
	"modules/cumulus/pallets/parachain-info",
	"modules/cumulus/pallets/ping",
	"modules/cumulus/primitives/core",
	"modules/cumulus/primitives/parachain-inherent",
	"modules/cumulus/primitives/timestamp",
	"modules/cumulus/primitives/utility",
	"modules/cumulus/test/client",
	"modules/cumulus/test/relay-sproof-builder",
	"modules/cumulus/test/relay-validation-worker-provider",
	"modules/cumulus/test/runtime",
	"modules/cumulus/test/service",
]

[badges]
maintenance = { status = "actively-developed" }

[profile.release]
# Selendra runtime requires unwinding.
panic = "unwind"
opt-level = 3

# make sure dev builds with backtrace do
# not slow us down
[profile.dev.package.backtrace]
inherits = "release"

[profile.production]
inherits = "release"
lto = true
codegen-units = 1

[profile.testnet]
inherits = "release"
debug = 1 # debug symbols are useful for profilers
debug-assertions = true
overflow-checks = true

[features]
runtime-benchmarks= [ "selendra-cli/runtime-benchmarks" ]
try-runtime = [ "selendra-cli/try-runtime" ]
fast-runtime = [ "selendra-cli/fast-runtime" ]
runtime-metrics = [ "selendra-cli/runtime-metrics" ]
pyroscope = ["selendra-cli/pyroscope"]

# Configuration for building a .deb package - for use with `cargo-deb`
[package.metadata.deb]
name = "selendra"
extended-description = "Implementation of Selendra node in Rust based on the Substrate framework."
section = "misc"
maintainer = "info@selendra.org"
license-file = ["LICENSE", "0"]
# https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html
maintainer-scripts = "scripts/packaging/deb-maintainer-scripts"
assets = [
	["target/release/selendra", "/usr/bin/", "755"],
	["scripts/packaging/selendra.service", "/lib/systemd/system/", "644"]
]
conf-files = [
	"/etc/default/selendra"
]

# Configuration for building an .rpm package - for use with `cargo-rpm`
[package.metadata.rpm]
package = "selendra"

[package.metadata.rpm.cargo]
buildflags = ["--release"]

[package.metadata.rpm.targets]
selendra = { path = "/usr/bin/selendra" }

[package.metadata.rpm.files]
"../scripts/packaging/selendra.service" = { path = "/usr/lib/systemd/system/selendra.service", mode = "644" }

[package.metadata.spellcheck]
config = "./spellcheck.toml"
